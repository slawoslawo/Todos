{"version":3,"sources":["app/api/agent.ts","app/stores/store.ts","app/stores/todoStore.ts","app/layout/NavBar.tsx","app/layout/LoadingComponent.tsx","features/todos/details/TodoDetails.tsx","features/todos/form/TodoForm.tsx","features/todos/dashboard/TodoList.tsx","features/todos/dashboard/TodoDashboard.tsx","app/layout/App.tsx","reportWebVitals.ts","index.tsx"],"names":["axios","defaults","baseURL","process","interceptors","response","use","a","console","log","Promise","reject","responseBody","data","requests","url","get","then","body","post","put","delete","agent","Todos","list","details","id","create","todo","update","store","todoStore","todoRegistry","Map","selectedTodo","undefined","editMode","loading","loadingInitial","loadTodos","forEach","date","split","set","setLoadingInitial","state","selectTodo","cancelSelectedTodo","openForm","closeForm","createTodo","uuid","runInAction","updateTodo","deleteTodo","makeAutoObservable","this","Array","from","values","sort","b","Date","parse","StoreContext","createContext","useStore","useContext","NavBar","Menu","inverted","fixed","Container","Item","header","name","Button","onClick","color","content","LoadingComponent","Dimmer","active","Loader","TodoDetails","Card","fluid","Content","Header","title","Meta","Description","description","extra","Group","widths","basic","observer","initialState","category","useState","setTodo","handleInputChange","event","target","value","Segment","clearing","Form","onSubmit","autoComplete","Input","placeholder","onChange","TextArea","type","floated","todosByDate","setTarget","divided","map","as","Extra","currentTarget","handleTodoDelete","Label","Grid","Column","width","useEffect","style","marginTop","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","Provider","document","getElementById"],"mappings":"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","file":"static/js/main.83a22569.chunk.js","sourcesContent":["import axios, { AxiosResponse } from 'axios';\r\nimport { request } from 'http';\r\nimport { Todo } from '../Models/todo';\r\n\r\nconst sleep = (delay: number ) => {\r\n  return new Promise((resolve) => {\r\n    setTimeout(resolve, delay)\r\n  })\r\n} \r\n\r\naxios.defaults.baseURL = process.env.REACT_APP_API_URL;\r\n\r\naxios.interceptors.response.use(async response => {\r\n try {\r\n    // await sleep(1000);\r\n    return response;\r\n  } catch (error) {\r\n    console.log(error);\r\n    return await Promise.reject(error);\r\n  }\r\n})\r\n\r\nconst responseBody = <T> (response: AxiosResponse<T>) => response.data;\r\n\r\nconst requests = {\r\n  get: <T> (url: string) => axios.get<T>(url).then(responseBody),\r\n  post: <T> (url: string, body: {}) => axios.post<T>(url, body).then(responseBody),\r\n  put: <T> (url: string, body: {}) => axios.put<T>(url, body).then(responseBody),\r\n  del: <T> (url: string) => axios.delete<T>(url).then(responseBody),\r\n}\r\n\r\nconst Todos = {\r\n  list: () => requests.get<Todo[]>('/todos'),\r\n  details: (id: string) => requests.get<Todo>(`/todos/${id}`),\r\n  create: (todo: Todo) => requests.post<void>('/todos', todo),\r\n  update: (todo: Todo) => requests.put<void>(`/todos/${todo.id}`,todo),\r\n  delete: (id: string) => requests.del<void>(`/todos/${id}`)\r\n}\r\nconst agent = {\r\n  Todos \r\n}\r\nexport default agent;\r\n\r\n","import { useContext } from \"react\";\r\nimport { createContext } from \"react\";\r\nimport TodoStore from \"./todoStore\";\r\nimport ActivityStore from \"./todoStore\";\r\n\r\ninterface Store{\r\n\r\n  todoStore: TodoStore\r\n}\r\n\r\nexport const store: Store = {\r\n  todoStore: new TodoStore()\r\n}\r\n\r\nexport const StoreContext = createContext(store);\r\n\r\nexport function useStore() {\r\n  return useContext(StoreContext)\r\n}\r\n","import {  makeAutoObservable, runInAction} from \"mobx\"\r\nimport agent from \"../api/agent\";\r\nimport { Todo } from \"../Models/todo\";\r\nimport {v4 as uuid } from 'uuid';\r\nimport { act } from \"react-dom/test-utils\";\r\n\r\nexport default class TodoStore{\r\n\r\n  todoRegistry = new Map<string, Todo>();\r\n  selectedTodo: Todo | undefined = undefined;\r\n  editMode = false;\r\n  loading = false;\r\n  loadingInitial = true;\r\n\r\n\r\n  constructor() {\r\n    makeAutoObservable(this)\r\n  }\r\n\r\n  get todosByDate() {\r\n    return Array.from(this.todoRegistry.values()).sort((a, b) => Date.parse(a.date) -\r\n    Date.parse(b.date));\r\n\r\n  }\r\n\r\n  loadTodos =async  () => {\r\n    try {\r\n      const todos = await agent.Todos.list();\r\n      \r\n\r\n        todos.forEach(todo => {\r\n          todo.date = todo.date.split('T')[0];\r\n          this.todoRegistry.set(todo.id, todo);\r\n        })\r\n        this.setLoadingInitial(false);\r\n        \r\n      \r\n    } catch (error) {\r\n      console.log(error)\r\n      \r\n        this.setLoadingInitial(false);\r\n    \r\n      \r\n\r\n    }\r\n\r\n  }\r\n  setLoadingInitial = (state: boolean) => {\r\n    this.loadingInitial = state;\r\n  }\r\n  selectTodo  = (id: string) => {\r\n    this.selectedTodo = this.todoRegistry.get(id);\r\n    \r\n\r\n  }\r\n  cancelSelectedTodo =  () => {\r\n this.selectedTodo = undefined;\r\n  }\r\n\r\n  openForm = (id?: string)=> {\r\n    id ? this.selectTodo(id) :this.cancelSelectedTodo();\r\n    this.editMode = true;\r\n\r\n\r\n  }\r\n  closeForm = () => {\r\n    this.editMode = false;\r\n  }\r\n\r\n  createTodo = async (todo: Todo) => {\r\n      this.loading = true;\r\n      todo.id = uuid();\r\n      try {\r\n        await agent.Todos.create(todo);\r\n        runInAction(() => {\r\n          this.todoRegistry.set(todo.id, todo);\r\n          this.selectedTodo = todo;\r\n          this.editMode = false;\r\n          this.loading = false;\r\n          \r\n        })\r\n        \r\n      } catch (error) {\r\n\r\n        console.log(error);\r\n        runInAction(() => {\r\n          this.loading = false;\r\n\r\n        })\r\n      }\r\n  }\r\n  updateTodo = async (todo:Todo ) => {\r\n    this.loading = true;\r\n    try {\r\n      \r\n      await agent.Todos.update(todo);\r\n      runInAction(()=> {\r\n      this.todoRegistry.set(todo.id, todo)\r\n        this.selectedTodo = todo;\r\n        this.editMode = false;\r\n        this.loading = false;\r\n\r\n\r\n      })\r\n\r\n    } catch (error) {\r\n      console.log(error)\r\n      runInAction(() => {\r\n        this.loading = false;\r\n      })\r\n    }\r\n  }\r\n  deleteTodo = async (id: string) => {\r\n    this.loading = true;\r\n    try {\r\n      await agent.Todos.delete(id);\r\n      runInAction(() => {\r\n       this.todoRegistry.delete(id);\r\n       if (this.selectedTodo?.id ===id) this.cancelSelectedTodo();\r\n       this.loading = false;\r\n\r\n      })\r\n    } catch (error) {\r\n      console.log(error)\r\n      runInAction(() => {\r\n        this.loading = false\r\n      })\r\n    }\r\n  }\r\n}\r\n","import React from \"react\";\r\nimport {Button, Container,  Menu } from \"semantic-ui-react\";\r\nimport { useStore } from \"../stores/store\";\r\n\r\n\r\n\r\nexport default function NavBar() {\r\n\r\n  const {todoStore} = useStore();\r\n\r\n  return(\r\n    <Menu inverted fixed='top'>\r\n      <Container>\r\n        <Menu.Item header>\r\n          \r\n        </Menu.Item>\r\n        <Menu.Item name='Todos'>\r\n\r\n        </Menu.Item>\r\n        <Menu.Item>\r\n          <Button  onClick={() =>  todoStore.openForm()} color='blue'  content='Create Todo'></Button>\r\n        </Menu.Item>\r\n      </Container>\r\n\r\n    </Menu>\r\n  )\r\n}","import React from \"react\";\r\nimport { Dimmer, Loader } from \"semantic-ui-react\";\r\ninterface Props {\r\n  inverted?: boolean;\r\n  content?: string;\r\n  \r\n}\r\nexport default function LoadingComponent({inverted = true, content = 'Loading...'}: Props){\r\n  return(\r\n    <Dimmer active={true} inverted = {inverted}>\r\n      <Loader content ={content}/>\r\n    </Dimmer>\r\n  )\r\n}","import React from \"react\";\r\nimport { useState } from \"react\";\r\nimport { Button, Card, Image } from \"semantic-ui-react\";\r\nimport LoadingComponent from \"../../../app/layout/LoadingComponent\";\r\nimport { Todo} from \"../../../app/Models/todo\";\r\nimport { useStore } from \"../../../app/stores/store\";\r\n\r\n\r\nexport default function TodoDetails() {\r\n\r\n  const {todoStore} = useStore();\r\n  const{selectedTodo: todo, openForm, cancelSelectedTodo} = todoStore;  \r\n\r\n  if (!todo) return <LoadingComponent />;\r\n  \r\n\r\n  return(\r\n    <Card fluid>\r\n      <Card.Content>\r\n        <Card.Header>\r\n        {todo.title}\r\n        </Card.Header>\r\n        <Card.Meta>\r\n        <span>{todo.date}</span>\r\n        </Card.Meta>\r\n        <Card.Description>\r\n        {todo.description}\r\n        </Card.Description>\r\n      </Card.Content>\r\n      <Card.Content extra>\r\n          <Button.Group widths='2'>\r\n            <Button onClick={() => openForm(todo.id)} basic color='blue' content='Edit'></Button>\r\n            <Button onClick={cancelSelectedTodo} basic color='grey' content='Cancel'></Button>\r\n\r\n          </Button.Group>        \r\n      </Card.Content>\r\n    </Card>\r\n  )\r\n\r\n}","import { observer } from \"mobx-react-lite\";\r\nimport React, { ChangeEvent } from \"react\";\r\nimport { useState } from \"react\";\r\nimport { Button, Form, Segment } from \"semantic-ui-react\";\r\nimport { Todo } from \"../../../app/Models/todo\";\r\nimport { useStore } from \"../../../app/stores/store\";\r\n\r\n\r\n\r\nexport default observer( function TodoForm() {\r\n\r\n  const {todoStore} = useStore();\r\n  const {selectedTodo,closeForm, createTodo,updateTodo,loading} = todoStore;\r\n  const initialState = selectedTodo ?? {\r\n    id: '',\r\n    title: '',\r\n    category: '',\r\n    description: '',\r\n    date: '',\r\n\r\n  }\r\n  const [todo, setTodo] = useState(initialState);\r\n\r\n  function handleSubmit() {\r\n    todo.id ? updateTodo(todo) : createTodo(todo);    \r\n  }\r\n  function handleInputChange(event: ChangeEvent<HTMLInputElement | HTMLTextAreaElement>) {\r\n    const{name, value} = event.target;\r\n    setTodo({...todo, [name]: value})\r\n  }\r\n\r\n  return(\r\n    <Segment clearing>\r\n      <Form onSubmit={handleSubmit} autoComplete='off'>\r\n        <Form.Input placeholder='Title' value={todo.title} name='title' \r\n        onChange={handleInputChange} />\r\n        <Form.TextArea placeholder='Description' value={todo.description} name='description' \r\n        onChange={handleInputChange}/>\r\n        <Form.Input placeholder='Category' value={todo.category} name='category' \r\n        onChange={handleInputChange}/>\r\n        <Form.Input type='date' placeholder='Date' value={todo.date} name='date' \r\n        onChange={handleInputChange}/>\r\n        <Button loading={loading} floated='right' color='blue' type='submit' content='Submit'/>\r\n        <Button onClick={closeForm} floated='right' type='button' content='Cancel'/>\r\n      </Form>\r\n    </Segment>\r\n  )\r\n}) ","import { observer } from \"mobx-react-lite\";\r\nimport React, { SyntheticEvent, useState } from \"react\";\r\nimport { act } from \"react-dom/test-utils\";\r\nimport { Button, Item, Label, Segment } from \"semantic-ui-react\";\r\n\r\nimport { useStore } from \"../../../app/stores/store\";\r\n\r\n\r\nexport default observer ( function TodoList() {\r\n  const {todoStore} = useStore();\r\n  const {deleteTodo, todosByDate, loading,  } = todoStore\r\n  const [target, setTarget] = useState('');\r\n  function handleTodoDelete(event: SyntheticEvent<HTMLButtonElement> , id:string) {\r\n\r\n    setTarget(event.currentTarget.name);\r\n    deleteTodo(id);\r\n  }\r\n\r\n\r\n  return (\r\n    <Segment>\r\n      <Item.Group divided>\r\n        {todosByDate.map(todo => (\r\n          <Item key={todo.id}>\r\n              <Item.Content>\r\n                <Item.Header as='a'>\r\n                  {todo.title}\r\n                </Item.Header>\r\n                <Item.Meta>\r\n                  {todo.date}\r\n                </Item.Meta>\r\n                <Item.Description>\r\n                  <div>\r\n                    {todo.description}\r\n                  </div>\r\n            \r\n                </Item.Description>\r\n                <Item.Extra>\r\n                  <Button onClick={() => todoStore.selectTodo(todo.id)}  floated='right' content='View' color='grey'>\r\n\r\n                  </Button>\r\n\r\n                  <Button \r\n                  name={todo.id}\r\n                  loading={loading && target=== todo.id} onClick={(event) =>\r\n                     handleTodoDelete(event, todo.id)}  floated='right' content='Delete' color='black'>\r\n\r\n</Button>\r\n                  <Label basic content={todo.category}/>\r\n                </Item.Extra>\r\n              </Item.Content>\r\n          </Item>\r\n        ))}\r\n      </Item.Group>     \r\n    </Segment>\r\n  )\r\n})","import { observer } from \"mobx-react-lite\";\r\nimport React from \"react\";\r\nimport { Grid } from \"semantic-ui-react\";\r\n\r\nimport { useStore } from \"../../../app/stores/store\";\r\nimport ActivityDetails from \"../details/TodoDetails\";\r\nimport ActivityForm from \"../form/TodoForm\";\r\nimport ActivityList from \"./TodoList\";\r\n\r\n\r\n\r\nexport default observer( function TodoDashboard() {\r\n\r\n  const {todoStore} = useStore();\r\n  const {selectedTodo, editMode} = todoStore;\r\n  return (\r\n\r\n\r\n    <Grid>\r\n      <Grid.Column width='10'>\r\n      <ActivityList  />\r\n      </Grid.Column>\r\n      <Grid.Column width='6'>\r\n        {selectedTodo && !editMode &&\r\n      <ActivityDetails \r\n \r\n\r\n      />}\r\n      {editMode &&\r\n      <ActivityForm  />}\r\n      </Grid.Column>\r\n    </Grid>\r\n  )\r\n})","import React, { useEffect} from 'react';\nimport { Container} from 'semantic-ui-react';\n\nimport NavBar from './NavBar';\nimport { Fragment } from 'react';\nimport TodoDashboard from '../../features/todos/dashboard/TodoDashboard';\n\n\nimport LoadingComponent from './LoadingComponent';\nimport { useStore } from '../stores/store';\nimport { observer } from 'mobx-react-lite';\n\nfunction App() {\n  const {todoStore} = useStore();\n\n\n\n  useEffect(() => {\n    todoStore.loadTodos();\n  },[todoStore])\n\n\n\n\n  if(todoStore.loadingInitial) return <LoadingComponent content='Loading app'/>\n  return (\n    <Fragment>\n        <NavBar ></NavBar>\n        <Container style={{marginTop: '7em'}}>\n\n          <TodoDashboard />\n            \n          </Container>\n        \n    </Fragment>\n  );\n}\n\nexport default observer(App);\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'semantic-ui-css/semantic.min.css';\nimport './app/layout/styles.css';\nimport App from './app/layout/App';\nimport reportWebVitals from './reportWebVitals';\nimport { store, StoreContext } from './app/stores/store';\n\nReactDOM.render(\n  <StoreContext.Provider value={store}>\n\n    <App />\n  </StoreContext.Provider>\n  ,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}